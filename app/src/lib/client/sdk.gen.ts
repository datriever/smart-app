// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { OptimizePortfolioData, OptimizePortfolioError, OptimizePortfolioResponse, SolarError, SolarResponse, GetMarketsError, GetMarketsResponse, GetMarketPricesData, GetMarketPricesError, GetMarketPricesResponse, GetSourcesError, GetSourcesResponse, UpsertSourceData, UpsertSourceError, UpsertSourceResponse, GetPortfolioError, GetPortfolioResponse, AddPortfolioSourceData, AddPortfolioSourceError, AddPortfolioSourceResponse, GetSolarDataError, GetSolarDataResponse, AddSolarDataData, AddSolarDataError, AddSolarDataResponse } from './types.gen.js';

export const client = createClient(createConfig());

/**
 * Optimize Portfolio
 */
export const optimizePortfolio = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<OptimizePortfolioData, ThrowOnError>) => {
    return (options?.client ?? client).post<OptimizePortfolioResponse, OptimizePortfolioError, ThrowOnError>({
        ...options,
        url: '/tools/optimize'
    });
};

/**
 * Solar
 */
export const solar = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<SolarResponse, SolarError, ThrowOnError>({
        ...options,
        url: '/tools/solar'
    });
};

/**
 * Get Markets
 * Get all markets.
 */
export const getMarkets = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMarketsResponse, GetMarketsError, ThrowOnError>({
        ...options,
        url: '/data/markets'
    });
};

/**
 * Get Market Prices
 * Get all prices for a market.
 */
export const getMarketPrices = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetMarketPricesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMarketPricesResponse, GetMarketPricesError, ThrowOnError>({
        ...options,
        url: '/data/markets/{id}'
    });
};

/**
 * Get Sources
 * Get all energy sources.
 */
export const getSources = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSourcesResponse, GetSourcesError, ThrowOnError>({
        ...options,
        url: '/data/sources'
    });
};

/**
 * Upsert Source
 * Create a new energy source.
 */
export const upsertSource = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpsertSourceData, ThrowOnError>) => {
    return (options?.client ?? client).post<UpsertSourceResponse, UpsertSourceError, ThrowOnError>({
        ...options,
        url: '/data/sources/{id}'
    });
};

/**
 * Get Portfolio
 * Get all sources in the portfolio.
 */
export const getPortfolio = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPortfolioResponse, GetPortfolioError, ThrowOnError>({
        ...options,
        url: '/data/portfolio'
    });
};

/**
 * Add Portfolio Source
 * Add a new source to the portfolio.
 */
export const addPortfolioSource = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<AddPortfolioSourceData, ThrowOnError>) => {
    return (options?.client ?? client).post<AddPortfolioSourceResponse, AddPortfolioSourceError, ThrowOnError>({
        ...options,
        url: '/data/portfolio/{id}'
    });
};

/**
 * Get Solar Data
 * Get all solar data.
 */
export const getSolarData = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSolarDataResponse, GetSolarDataError, ThrowOnError>({
        ...options,
        url: '/data/solar'
    });
};

/**
 * Add Solar Data
 * Add new solar data.
 */
export const addSolarData = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<AddSolarDataData, ThrowOnError>) => {
    return (options?.client ?? client).post<AddSolarDataResponse, AddSolarDataError, ThrowOnError>({
        ...options,
        url: '/data/solar'
    });
};